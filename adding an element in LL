class Node{
    public Object item;
    public Node next;//pointing to next node
}
public class linkedlistimplementation {
    private int size;
    private Node head;

   public linkedlistimplementation(){
        this.size=0;
        this.head= null;   
   }
   public void insertingnode(String i){
    Node node= new Node();
    node.item= i;
    Node.current=this.head;
    if (this.head==null){
        this.head=node;
        this.head.next= null;
        this.size=1;
        System.out.println(this.head.toString());
    }else{
        while(current.next!=null){
            current=current.next
        }
        current.next=node;
        node.next=null;
        this.size+=1;
    }
   }
    }
********************
public void addAtStarting(String i) {
        Node n = new Node();
        n.item = i;
        n.next = this.head;
        this.head = n;
    }
**********************************************************************
public void addAtMiddle(String i,int pos)
	{
		Node node=new Node();
		Node current=this.head;
		if(this.head!=null && pos<=this.size)
		{
			for(int j=0;j<pos;j++) {
				current=current.next;
			}
			node.item=i;
			node.next=current.next;
			current.next=node;
			this.size+=1;
		}
		else
		{
			System.out.println("position is greater than size");
		}
	}
**************************************************************************************************************
public void find(int value) {
        Node current = this.head;
        boolean flag = false;
        for(int i = 0; i < size; i++) {
            if (current.item.equals(value)) {
                System.out.println("Element present at index " + i);
                flag = true;
                // break;
            }
            
            current = current.next;

        }
        if (!flag) {
            System.out.println("Element not present in Linked List");
        }

    }
*********************************************************************************************************
 public void display(){
        Node current = this.head;
        for(int i = 0;i<size;i++){
            System.out.println(current.item);
            current = current.next;
        }
    }
********************************************************************************
stacks
public class StackDs {
	private static Object[] stackarray;
	private static int size;
	private static int top;
	public StackDs(int size)
	{
		this.size=size;
		this.top=-1;
		stackarray=new Object[size];
	}
	public void push(Object value)
	{
		if(top==size-1 ) {
			System.out.println("Stack is Full");
		}
		else {
		top++;
		stackarray[top]=value;
		}
	}
	public Object pop()
	{
		if(top==-1) {
			System.out.println("Stack is Empty");
			return -1;
		}
		else
		{
			int oldtop=top;
			top--;
			stackarray[oldtop]=null;
			return stackarray[top];
		}
	}
	public Object peek()
	{
		return stackarray[top];
	}
	public static void main(String[] args) {
		StackDs s=new StackDs(5);
		s.push(10);
		s.push(20);
		s.push(30);
		s.push(40);
		s.push(50);
		s.pop();
		for(int i=0;i<=top;i++)
			System.out.println(stackarray[i]);
	}

}
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
***************************************************************************************************
