package LinkedLists;
import java.util.*;
import java.io.*;
import java.lang.*;

class Node{
    int data;
    Node next;
 
    Node (int x) 
    {
        data = x;
    next = null;
    } 
} 
class LinkedList{
  
    static Node insertStart (Node head, int data) 
    {
        Node newNode = new Node (data);
    
        newNode.next = head;
 
        //changing the new head to this freshly entered node
        head = newNode;
 
        return head;
    }
  
    static void insertLast (Node head, int data) 
    {
    
        Node newNode = new Node (data);
 
          //need this if there is no node present in linked list at all
        if (head == null)
        {
            head = newNode;
            return;
        }
        Node temp = head;

        while (temp.next != null)
            temp = temp.next;
    
        temp.next = newNode;
 
    }
  
 
    static void insertPosition (int pos, int data, Node head) 
    {
    
        int size = calcSize (head);
    
        //If pos is 0 then should use insertStart method
        //If pos is less than 0 then can't enter at all
        //If pos is greater than size then bufferbound issue
        if (pos < 1 || size < pos)
        {
	
            System.out.println ("Can't insert," + pos +" is not a valid position\n");
        }
        else
       {
            Node newNode = new Node (data);
	    	//giving any random value
	        Node temp = head;
 
            while (--pos > 0)
    	    {
                temp = temp.next;
            }
	
        	//(25)->next = 10 as 12->next is 10
	        newNode.next = temp.next;
	
        	 // (12)->next = 25
	        temp.next = newNode;
        	//new node added in b/w 12 and 10
        }
    }
     
    static void display (Node node) 
    {
    
        //as linked list will end when Node is Null
        while (node != null)
        {
	
            System.out.print (node.data + " ");
            node = node.next;
        }
    
        System.out.println ();
    }
 
    static int calcSize (Node node)
    {
    
        int size = 0;
    
        while (node != null)
        {
	
            node = node.next;
            size++;
        }
        return size;
    }
  
    public static void main (String args[]) 
    {
    
        Node head = null;
 
        head = insertStart (head, 12);
        head = insertStart (head, 16);
        head = insertStart (head, 20);
     
        insertLast (head, 10);
        insertLast (head, 14);
        insertLast (head, 18);
        insertLast (head, 11);
 
        //Inserts after 3rd position
        insertPosition (3, 25, head);

        display (head);
 
    } 
} 
****************************************************************
class Node{
    public Object item;
    public Node next;//pointing to next node
}
public class linkedlistimplementation {
    private int size;
    private Node head;

   public linkedlistimplementation(){
        this.size=0;
        this.head= null;   
   }
   public void insertingnode(String i){
    Node node= new Node();
    node.item= i;
    Node.current=this.head;
    if (this.head==null){
        this.head=node;
        this.head.next= null;
        this.size=1;
        System.out.println(this.head.toString());
    }else{
        while(current.next!=null){
            current=current.next
        }
        current.next=node;
        node.next=null;
        this.size+=1;
    }
   }
    }
********************
public void addAtStarting(String i) {
        Node n = new Node();
        n.item = i;
        n.next = this.head;
        this.head = n;
    }
**********************************************************************
public void addAtMiddle(String i,int pos)
	{
		Node node=new Node();
		Node current=this.head;
		if(this.head!=null && pos<=this.size)
		{
			for(int j=0;j<pos;j++) {
				current=current.next;
			}
			node.item=i;
			node.next=current.next;
			current.next=node;
			this.size+=1;
		}
		else
		{
			System.out.println("position is greater than size");
		}
	}
**************************************************************************************************************
public void find(int value) {
        Node current = this.head;
        boolean flag = false;
        for(int i = 0; i < size; i++) {
            if (current.item.equals(value)) {
                System.out.println("Element present at index " + i);
                flag = true;
                // break;
            }
            
            current = current.next;

        }
        if (!flag) {
            System.out.println("Element not present in Linked List");
        }

    }
*********************************************************************************************************
 public void display(){
        Node current = this.head;
        for(int i = 0;i<size;i++){
            System.out.println(current.item);
            current = current.next;
        }
    }
********************************************************************************
stacks
public class StackDs {
	private static Object[] stackarray;
	private static int size;
	private static int top;
	public StackDs(int size)
	{
		this.size=size;
		this.top=-1;
		stackarray=new Object[size];
	}
	public void push(Object value)
	{
		if(top==size-1 ) {
			System.out.println("Stack is Full");
		}
		else {
		top++;
		stackarray[top]=value;
		}
	}
	public Object pop()
	{
		if(top==-1) {
			System.out.println("Stack is Empty");
			return -1;
		}
		else
		{
			int oldtop=top;
			top--;
			stackarray[oldtop]=null;
			return stackarray[top];
		}
	}
	public Object peek()
	{
		return stackarray[top];
	}
	public static void main(String[] args) {
		StackDs s=new StackDs(5);
		s.push(10);
		s.push(20);
		s.push(30);
		s.push(40);
		s.push(50);
		s.pop();
		for(int i=0;i<=top;i++)
			System.out.println(stackarray[i]);
	}

}
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
***************************************************************************************************
package BinarySearch;

// binary search tree 


class Node{
	Node left,right;
	int data;
	public Node(int data) {
		this.data=data;
		left=right=null;
	}
}
public class BinarySearchTree {
	Node root;
	public BinarySearchTree() {
		root=null;
	}
	void insert(int data) {
		root=insertRecursive(root,data);
		
	}
	Node insertRecursive(Node root,int data ) {
		if(root==null) {
			root=new Node(data);
			return root;
		}
		if(data<root.data) {
			root.left=insertRecursive(root.left,data);
		}
		else if(data>root.data) {
			root.right=insertRecursive(root.right,data);
		}
		return root;
	}
	void preorder(Node root) {
		if(root!=null) {
			System.out.print(root.data+" ");
			preorder(root.left);
			preorder(root.right);
		}
	}
	

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		BinarySearchTree bst=new BinarySearchTree();
		bst.insert(5);
		bst.insert(3);
		bst.insert(8);
		bst.insert(2);
		bst.insert(4);
		bst.insert(7);
		bst.insert(9);
		bst.preorder(bst.root);
		
		// preorder-5,3,2,4,8,7,9
		
		

	}

}
*************************************************************************************************************************************************
