public class simpleHashFunction {
    public static int customHashFunction(String input){
        int hashCode=0;
        for(int i=0;i<input.length();i++){
            hashCode += input.charAt(i);
        }
        return hashCode;

    }
    public static void main(String[] args){
        String name ="Gousiya";
        int hashCode = customHashFunction(name);
        System.out.println(name);
        System.out.println(hashCode);

    }
    
}
****************************************************************************

String name = "Pushpanjali";
        int hashCode = name.hashCode();

        System.out.println("Name: " + name + "\nHashCode: " + hashCode);
Map<Integer, String> dataMap = new HashMap<>();

        String name = "Pushpanjali";
        int hashCode = name.hashCode();

        // Key => hashCode
        dataMap.put(hashCode, name);
        String outputName = dataMap.get(hashCode);   
        System.out.println("Name: " + outputName);
    }
*****************************************************************************************
put(K key, V value): Inserts a key-value mapping into the HashMap. If the key already exists, the value is overwritten.

get(Object key): Retrieves the value associated with the specified key. Returns null if the key is not found.

containsKey(Object key): Checks if the HashMap contains the specified key. Returns true if the key is found.

containsValue(Object value): Checks if the HashMap contains the specified value. Returns true if the value is found.

remove(Object key): Removes the key-value mapping associated with the specified key from the HashMap.

size(): Returns the number of key-value mappings in the HashMap.

isEmpty(): Checks if the HashMap is empty. Returns true if the HashMap contains no mappings.
*************************************************************************************************************************************************************
Map<Integer, String> studentData = new Hashtable<>(); 
studentData.put(1,"Ishu"); studentData.put(2,"Keerthi");
studentData.put(3,"Manasa"); studentData.put(4,"Chandipriya"); 
studentData.put(5,"Suma");
int searchIndex = 2; String outputName = studentData.get(searchIndex); 
System.out.println(outputName);
**************************************************************************************************************************
public class ReverseLinkedList { 
static class ListNode { 
int val;
ListNode next;
ListNode(int val) { 
this.val = val;
} 
}
public static ListNode reverseLinkedList(ListNode head) 
{ 
ListNode prevNode = null;
ListNode currNode = head;
while (currNode != null) { 
ListNode nextNode = currNode.next;
currNode.next = prevNode; 
prevNode = currNode; 
currNode = nextNode; 
} 
return prevNode; 
}
public static void printLinkedList(ListNode head)
{ 
ListNode currNode = head;
while (currNode != null) { 
System.out.print(currNode.val + " -> "); 
currNode = currNode.next;
}
System.out.println("null"); 
} 
public static void main(String[] args) { 
// Create a sample linked list: 1 -> 2 -> 3 -> 4 -> 5
ListNode head = new ListNode(1);
head.next = new ListNode(2); 
head.next.next = new ListNode(3); 
head.next.next.next = new ListNode(4); 
head.next.next.next.next = new ListNode(5); 
System.out.println("Original Linked List:"); printLinkedList(head); 
ListNode reversedHead = reverseLinkedList(head);
System.out.println("Reversed Linked List:");
printLinkedList(reversedHead); } 
}
